# -*- coding: utf-8 -*-
"""data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O9OyVDWLCQ_MBseW0j1Z9TbLbT9plDyU

# Case Absolute

## Data Processing
"""

import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import pyarrow
import datetime
import numpy as np
import warnings
warnings.filterwarnings('ignore')

"""### CSV Data to Parquet"""

# data_csv= pd.read_csv('Casos.csv', delimiter=';')

# data_csv.head(10)

# data_csv.tail(10)

# data_csv.shape

# data_csv.dtypes

# data_csv.to_parquet('covid_data.parquet', index=False, compression='gzip')

"""### Parquet Data"""

data_pqt = pd.read_parquet('covid_data.parquet')

data_pqt.shape

data = data_pqt.copy()

data.shape

data.isnull().sum()

data = data.dropna(subset=['Idade', 'Genero'])

data.isnull().sum()

data.nunique()

data['Data_Inicio_Sintomas'] = pd.to_datetime(data['Data_Inicio_Sintomas'], errors='coerce')

data.isnull().sum()

data['Idade'].describe()

data['Idade']

data['Idade'] = data['Idade'].astype(int)

data['Idade']

data =  data[data['Idade'] <  110]

data.head(2)

data['Genero'].unique()

data = data[data['Genero'].isin(['MASCULINO', 'FEMININO'])]

data.head(2)

"""## Solving

### 1 - Existe diferença de incidência de covid entre homens e mulheres?
"""

gen_graph_data = data['Genero'].value_counts().sort_index().reset_index()
gen_graph_data.columns = ['Genero', 'Casos']

gen_graph_data

graph_gen_confirm = px.bar(
    gen_graph_data, y='Casos', x='Genero', text_auto='.2s',
    color_discrete_sequence=px.colors.qualitative.Pastel1
)
graph_gen_confirm.update_traces(textfont_size=15)
graph_gen_confirm.update_layout(
    width=500,
    height=400,
    title=dict(text='<b>Incidência por Gênero<b>')
)
total = np.sum(gen_graph_data['Casos'])
graph_gen_confirm.add_annotation(
    x=1,
    y=3.3e6,
    text=f'<b>Total: {(total/1000000):.1f}M<b>',
    font=dict(color='black', size=12),
    showarrow=False
)

graph_gen_confirm

#Os Dados mostram que há maior incidência do vírus em Mulheres.

"""### 2- Faça um gráfico da mortalidade por faixas de idade"""

age_graph_data = data[['Idade', 'Obito']].value_counts().sort_index().reset_index()
age_graph_data.columns =['Idade', 'Obito', 'Total']
age_graph_data = age_graph_data[age_graph_data['Obito']==1]

age_graph_data

graph_age_death = px.bar(
    age_graph_data, y='Total', x='Idade',
    color_discrete_sequence=px.colors.qualitative.Pastel
)
graph_age_death.update_traces(textfont_size=15)
graph_age_death.update_layout(
    width=1500,
    height=400,
    title=dict(text='<b>Vítimas por Idade<b>')
)
total = np.sum(age_graph_data['Total'])
graph_age_death.add_annotation(
    x=10,
    y=4300,
    text=f'<b>Total: {((total)/1000):.0f}Mil<b>',
    font=dict(color='black', size=13),
    showarrow=False
)
graph_age_death

"""### 3- Qual a doença pré-existente mais provável de se encontrar numa pessoa com covid?"""

data1 = data.copy()
illness_graph_data = data1.drop(columns=['Data_Inicio_Sintomas', 'Diagnostico_Covid19', 'Genero', 'Idade', 'Municipio', 'Obito', 'Outros_Fatores_De_Risco'])

illness_graph_data_melt = pd.melt(illness_graph_data, var_name='Doenca', value_name='Status')

illness_graph_data_melt = illness_graph_data_melt[['Doenca', 'Status']].value_counts().sort_index().reset_index()
illness_graph_data_melt

illness_graph_data_melt= illness_graph_data_melt[illness_graph_data_melt['Status']=='SIM'].reset_index().drop(columns='index')
illness_graph_data_melt.columns=['Doenca', 'Status','Total']
illness_graph_data_melt

illness_graph_data_melt['Percent'] = (illness_graph_data_melt['Total']/ np.sum(illness_graph_data_melt['Total']))*100
illness_graph_data_melt = illness_graph_data_melt.sort_values(by='Percent')

fig = make_subplots(rows=1, cols=2, specs=[[{}, {}]], shared_xaxes=True,
                    shared_yaxes=False, vertical_spacing=0.001)

fig.append_trace(go.Bar(
    x=illness_graph_data_melt['Percent'],
    y=illness_graph_data_melt['Doenca'],
    marker=dict(
        color='rgba(50, 171, 96, 0.6)',
        line=dict(
            color='rgba(50, 171, 96, 1.0)',
            width=1),
    ),
    name='(%)',
    orientation='h',
), 1, 1)

fig.append_trace(go.Scatter(
    x=illness_graph_data_melt['Total'],
    y=illness_graph_data_melt['Doenca'],
    mode='lines+markers',
    line_color='rgb(128,0,128)',
    name='Total',
),1,2)

fig.update_layout(
    title = '<b>Doenças Pré-Existentes',
    yaxis=dict(
        showgrid=False,
        showline=False,
        showticklabels = True,
        domain=[0, 0.85],
    ),
    yaxis2=dict(
        showgrid=False,
        showline=True,
        showticklabels=False,
        linecolor='rgba(102, 102, 102, 0.8)',
        linewidth=2,
        domain=[0, 0.85],
    ),
        xaxis=dict(
        zeroline=False,
        showline=False,
        showticklabels=True,
        showgrid=True,
        domain=[0, 0.42],
    ),
    xaxis2=dict(
        zeroline=False,
        showline=False,
        showticklabels=True,
        showgrid=True,
        domain=[0.47, 1],
        side='top',
        dtick=50000,),

    legend=dict(x=0.029, y=1.038, font_size=10),
    margin=dict(l=100, r=20, t=70, b=70),
    paper_bgcolor='rgb(248, 248, 255)',
    plot_bgcolor='rgb(248, 248, 255)',
)

annotations = []

y_s = np.round(illness_graph_data_melt['Percent'], decimals=2)
y_nw = np.rint(illness_graph_data_melt['Total'])

#labels
for ydn, yd, xd in zip(y_nw, y_s, illness_graph_data_melt['Doenca']):
    # scatter
    annotations.append(dict(xref='x2', yref='y1',
                            y=xd, x=ydn - 20000,
                            text='{:.0f}'.format(ydn/1000) + 'k',
                            font=dict(family='Arial', size=12,
                                      color='rgb(128, 0, 128)'),
                            showarrow=False))
    # bar
    annotations.append(dict(xref='x1', yref='y1',
                            y=xd, x=yd + 3,
                            text=str(yd) + '%',
                            font=dict(family='Arial', size=12,
                                      color='rgb(50, 171, 96)'),
                            showarrow=False))

fig.update_layout(annotations=annotations)
fig.show()

"""### 4- Baseado nesses dados, faça um modelo que estime a probabilidade da pessoa morrer, uma vez que está contaminada com covid, e considerando os inputs de idade, gênero e doenças pré-existentes"""

prob_data = data[['Idade', 'Asma', 'Cardiopatia', 'Diabetes',
       'Doenca_Hematologica', 'Doenca_Hepatica',
       'Doenca_Neurologica', 'Doenca Renal', 'Genero',
       'Imunodepressao', 'Obesidade',
       'Pneumopatia', 'Puérpera',
       'Síndrome_De_Down', 'Diagnostico_Covid19','Obito']]

size_sample = int(len(prob_data)*0.15)
np.random.seed(1)

prob_data_sample = prob_data.sample(n=size_sample, replace=False)

prob_data_sample

x_covid = prob_data_sample.iloc[:,0:15].values

x_covid

x_covid[0]

y_covid = prob_data_sample.iloc[:, 15].values

y_covid

import sklearn
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer

labelencd_asma = LabelEncoder()
labelencd_card = LabelEncoder()
labelencd_diab = LabelEncoder()
labelencd_hemato = LabelEncoder()
labelencd_hepa = LabelEncoder()
labelencd_neuro = LabelEncoder()
labelencd_renal = LabelEncoder()
labelencd_gen = LabelEncoder()
labelencd_imuno = LabelEncoder()
labelencd_obes = LabelEncoder()
labelencd_pneu = LabelEncoder()
labelencd_puer = LabelEncoder()
labelencd_sindd = LabelEncoder()
labelencd_diag = LabelEncoder()

x_covid[:,1] = labelencd_asma.fit_transform(x_covid[:,1])
x_covid[:,2] = labelencd_card.fit_transform(x_covid[:,2])
x_covid[:,3] = labelencd_diab.fit_transform(x_covid[:,3])
x_covid[:,4] = labelencd_hemato.fit_transform(x_covid[:,4])
x_covid[:,5] = labelencd_hepa.fit_transform(x_covid[:,5])
x_covid[:,6] = labelencd_neuro.fit_transform(x_covid[:,6])
x_covid[:,7] = labelencd_renal.fit_transform(x_covid[:,7])
x_covid[:,8] = labelencd_gen.fit_transform(x_covid[:,8])
x_covid[:,9] = labelencd_imuno.fit_transform(x_covid[:,9])
x_covid[:,10] = labelencd_obes.fit_transform(x_covid[:,10])
x_covid[:,11] = labelencd_pneu.fit_transform(x_covid[:,11])
x_covid[:,12] = labelencd_puer.fit_transform(x_covid[:,12])
x_covid[:,13] = labelencd_sindd.fit_transform(x_covid[:,13])
x_covid[:,14] = labelencd_diag.fit_transform(x_covid[:,14])

x_covid

onehotencoder_covid= ColumnTransformer(transformers=[('OneHot', OneHotEncoder(),[1,2,3,4,5,6,7,8,9,10,11,12,13,14])], remainder='passthrough')

x_covid = onehotencoder_covid.fit_transform(x_covid)

x_covid

from sklearn.preprocessing import StandardScaler
scaler_covid = StandardScaler()

x_covid = scaler_covid.fit_transform(x_covid)

x_covid[0]

from sklearn.model_selection import train_test_split

x_covid_training, x_covid_test, y_covid_training, y_covid_test = train_test_split(x_covid, y_covid, test_size= 0.20, random_state = 0)

x_covid_training.shape, x_covid_test.shape

y_covid_training.shape, y_covid_test.shape

import pickle
with open('covid.pkl', mode='wb') as f:
  pickle.dump([x_covid_training, y_covid_training, x_covid_test, y_covid_test], f)

from sklearn.ensemble import RandomForestClassifier

with open('covid.pkl', 'rb') as f:
  x_covid_training, x_covid_test, y_covid_training, y_covid_test = pickle.load(f)

x_covid_training.shape, x_covid_test.shape

y_covid_training.shape, y_covid_test.shape

random_forest_covid = RandomForestClassifier(n_estimators=40, criterion='entropy', random_state=0)
random_forest_covid.fit(x_covid_training, y_covid_training)

predict = random_forest_covid.predict(x_covid_test)
predict

y_covid_test

from sklearn.metrics import accuracy_score, classification_report
accuracy = accuracy_score(y_covid_test, predict)
print(f'Prediction: {accuracy*100:.2f}%')

random_case = np.random.randint(len(x_covid_test))
sim_case = x_covid_test[random_case]
sim_case = sim_case.reshape(1, -1)

random_case_predict = random_forest_covid.predict(sim_case)
random_case_predict

from yellowbrick.classifier import ConfusionMatrix
cm = ConfusionMatrix(random_forest_covid)
cm.fit(x_covid_training, y_covid_training)
cm.score(x_covid_test, y_covid_test)